name: CI

on:
  push:
    branches: [master, main]
  pull_request:
    branches: [master, main]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: nightly-2025-06-26
          components: rustfmt, clippy

      - name: Install FFmpeg
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg libavutil-dev libavformat-dev libavcodec-dev libavfilter-dev libavdevice-dev libswscale-dev libswresample-dev

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Check formatting
        run: cargo fmt -- --check

      - name: Run clippy
        run: cargo clippy --workspace -- -D warnings

      - name: Test workspace
        run: cargo test --workspace

      - name: Build release
        run: cargo build --workspace --release

  build-matrix:
    name: Build
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20  # Prevent hanging builds
    strategy:
      fail-fast: false  # Don't cancel other jobs if one fails
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: nightly-2025-06-26

      - name: Cache Cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-ffmpeg
          restore-keys: |
            ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-
            ${{ runner.os }}-cargo-

      - name: Install FFmpeg (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg libavutil-dev libavformat-dev libavcodec-dev libavfilter-dev libavdevice-dev libswscale-dev libswresample-dev

      - name: Install FFmpeg (macOS)
        if: matrix.os == 'macos-latest'
        run: brew install ffmpeg

      - name: Cache FFmpeg (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/cache@v3
        id: cache-ffmpeg-windows
        with:
          path: |
            C:\ffmpeg-shared
          key: ${{ runner.os }}-ffmpeg-shared-6.1.1

      - name: Install FFmpeg (Windows)
        if: matrix.os == 'windows-latest' && steps.cache-ffmpeg-windows.outputs.cache-hit != 'true'
        run: |
          # Download pre-built FFmpeg shared libraries (much faster than vcpkg)
          Write-Host "Downloading pre-built FFmpeg..."
          $url = "https://github.com/BtbN/FFmpeg-Builds/releases/download/latest/ffmpeg-master-latest-win64-gpl-shared.zip"
          $output = "ffmpeg.zip"
          Invoke-WebRequest -Uri $url -OutFile $output
          
          # Extract to standard location
          Expand-Archive -Path $output -DestinationPath C:\
          Move-Item "C:\ffmpeg-master-latest-win64-gpl-shared" "C:\ffmpeg-shared"
          Remove-Item $output

      - name: Setup FFmpeg Environment (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          # Set environment variables for ffmpeg-sys-next to use shared libraries
          echo "FFMPEG_DIR=C:\ffmpeg-shared" >> $env:GITHUB_ENV
          echo "FFMPEG_PKG_CONFIG=0" >> $env:GITHUB_ENV
          # Add FFmpeg to PATH so DLLs can be found at runtime
          echo "C:\ffmpeg-shared\bin" >> $env:GITHUB_PATH

      - name: Build
        env:
          # Speed up Windows builds
          CARGO_INCREMENTAL: 0  # Disable incremental compilation in CI
        run: cargo build --workspace --release
