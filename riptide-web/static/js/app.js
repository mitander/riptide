import{f as l,a as h,d as u}from"./formatting-Df0aMrHg.js";class m{constructor(t=""){}async addTorrent(t){return(await(await fetch(`/api/torrents/add?magnet=${encodeURIComponent(t)}`)).json()).result}async getTorrents(){const t=await fetch("/api/torrents");if(!t.ok)throw new Error(`Failed to fetch torrents: ${t.statusText}`);return(await t.json()).torrents}async pauseTorrent(t){const e=await fetch(`/api/torrents/${t}/pause`,{method:"POST"});if(!e.ok)throw new Error(`Failed to pause torrent: ${e.statusText}`)}async removeTorrent(t){const e=await fetch(`/api/torrents/${t}`,{method:"DELETE"});if(!e.ok)throw new Error(`Failed to remove torrent: ${e.statusText}`)}async getLibraryItems(){const t=await fetch("/api/library");if(!t.ok)throw new Error(`Failed to fetch library: ${t.statusText}`);return(await t.json()).items}async searchMedia(t,e="all"){let r="/api/search";e==="movie"?r="/api/search/movies":e==="tv"&&(r="/api/search/tv");const a=await fetch(`${r}?q=${encodeURIComponent(t)}`);if(!a.ok)throw new Error(`Search failed: ${a.statusText}`);return(await a.json()).results}async getServerStats(){const t=await fetch("/api/stats");if(!t.ok)throw new Error(`Failed to fetch stats: ${t.statusText}`);return(await t.json()).stats}async getRecentActivity(){const t=await fetch("/api/activity");if(!t.ok)throw new Error(`Failed to fetch activity: ${t.statusText}`);return(await t.json()).activity}async getSettings(){const t=await fetch("/api/settings");if(!t.ok)throw new Error(`Failed to fetch settings: ${t.statusText}`);return(await t.json()).settings}async saveSettings(t){const e=await fetch("/api/settings",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});if(!e.ok)throw new Error(`Failed to save settings: ${e.statusText}`)}}const o=new m;class c{constructor(){this.activityListElement=document.querySelector(".activity-list"),this.statsElements=new Map,document.querySelectorAll(".stat-card").forEach(e=>{var n,i;const r=(i=(n=e.querySelector("h3"))==null?void 0:n.textContent)==null?void 0:i.toLowerCase(),a=e.querySelector(".stat-value");r&&a&&this.statsElements.set(r,a)})}async initialize(){try{await Promise.all([this.loadServerStats(),this.loadRecentActivity()])}catch(t){console.error("Failed to initialize dashboard:",t),this.showError("Failed to load dashboard data")}}async loadServerStats(){const t=await o.getServerStats();this.updateStats(t)}async loadRecentActivity(){const t=await o.getRecentActivity();this.renderActivityList(t)}updateStats(t){[{key:"active torrents",value:t.total_torrents.toString()},{key:"active streams",value:t.active_streams.toString()},{key:"download speed",value:`${t.download_speed} KB/s`},{key:"upload speed",value:`${t.upload_speed} KB/s`}].forEach(({key:r,value:a})=>{const n=this.statsElements.get(r);n&&(n.textContent=a)})}renderActivityList(t){if(!this.activityListElement){console.warn("Activity list element not found");return}this.activityListElement.innerHTML="",t.forEach(e=>{const r=this.createActivityElement(e);this.activityListElement.appendChild(r)})}createActivityElement(t){const e=document.createElement("div");return e.className="activity-item",e.innerHTML=`
      <div class="activity-icon ${t.activity_type}"></div>
      <div class="activity-content">
        <p class="activity-description">${this.escapeHtml(t.description)}</p>
        <p class="activity-time">${l(t.timestamp)}</p>
      </div>
    `,e}showError(t){var r;let e=document.querySelector(".error-banner");e||(e=document.createElement("div"),e.className="error-banner",(r=document.querySelector(".dashboard"))==null||r.prepend(e)),e.textContent=t,e.style.display="block",setTimeout(()=>{e.style.display="none"},5e3)}escapeHtml(t){const e=document.createElement("div");return e.textContent=t,e.innerHTML}async refresh(){await this.initialize()}}function y(){if(document.readyState==="loading")document.addEventListener("DOMContentLoaded",()=>{const s=new c;s.initialize(),window.dashboard=s});else{const s=new c;s.initialize(),window.dashboard=s}}class d{constructor(){this.refreshInterval=null,this.tableBody=document.getElementById("torrents-tbody"),this.tableBody||console.error("Torrents table body not found")}async initialize(){try{await this.loadTorrents(),this.startAutoRefresh()}catch(t){console.error("Failed to initialize torrent manager:",t)}}async loadTorrents(){try{const t=await o.getTorrents();this.renderTorrents(t)}catch(t){console.error("Failed to load torrents:",t),this.showError("Failed to load torrent list")}}renderTorrents(t){this.tableBody&&(this.tableBody.innerHTML="",t.forEach(e=>{const r=this.createTorrentRow(e);this.tableBody.appendChild(r)}))}createTorrentRow(t){const e=document.createElement("tr");return e.dataset.infoHash=t.info_hash.hash,e.innerHTML=`
      <td class="torrent-name">${this.escapeHtml(t.name)}</td>
      <td><span class="status ${t.status.toLowerCase()}">${t.status}</span></td>
      <td>
        <div class="progress-bar">
          <div class="progress-fill" style="width: ${t.progress}%"></div>
          <span class="progress-text">${t.progress.toFixed(1)}%</span>
        </div>
      </td>
      <td>${(t.download_speed/1024).toFixed(0)} KB/s</td>
      <td>${(t.upload_speed/1024).toFixed(0)} KB/s</td>
      <td>${h(t.size)}</td>
      <td>${t.ratio.toFixed(2)}</td>
      <td>${t.peers}/${t.seeds}</td>
      <td class="torrent-actions">
        <button class="btn btn-sm" onclick="torrentManager.pauseTorrent('${t.info_hash.hash}')">Pause</button>
        <button class="btn btn-sm btn-danger" onclick="torrentManager.removeTorrent('${t.info_hash.hash}')">Remove</button>
      </td>
    `,e}async pauseTorrent(t){try{await o.pauseTorrent(t),await this.loadTorrents()}catch(e){console.error("Failed to pause torrent:",e),this.showError("Failed to pause torrent")}}async removeTorrent(t){if(confirm("Are you sure you want to remove this torrent?"))try{await o.removeTorrent(t),await this.loadTorrents()}catch(e){console.error("Failed to remove torrent:",e),this.showError("Failed to remove torrent")}}async refreshTorrents(){await this.loadTorrents()}startAutoRefresh(){this.refreshInterval=window.setInterval(()=>{this.loadTorrents()},5e3)}stopAutoRefresh(){this.refreshInterval&&(clearInterval(this.refreshInterval),this.refreshInterval=null)}showError(t){console.error(t),alert(t)}escapeHtml(t){const e=document.createElement("div");return e.textContent=t,e.innerHTML}destroy(){this.stopAutoRefresh()}}function p(){if(document.readyState==="loading")document.addEventListener("DOMContentLoaded",()=>{const s=new d;s.initialize(),window.torrentManager=s});else{const s=new d;s.initialize(),window.torrentManager=s}}window.refreshTorrents=()=>{const s=window.torrentManager;s&&s.refreshTorrents()};class w{constructor(){this.currentPage=this.detectCurrentPage(),this.initialize()}detectCurrentPage(){const t=window.location.pathname;return t==="/"||t==="/home"?"home":t.includes("/library")?"library":t.includes("/torrents")?"torrents":t.includes("/add-torrent")?"add-torrent":t.includes("/search")?"search":t.includes("/settings")?"settings":"unknown"}initialize(){switch(console.log(`Initializing Riptide UI for page: ${this.currentPage}`),this.currentPage){case"home":y();break;case"torrents":p();break;case"library":this.initializeLibrary();break;case"search":this.initializeSearch();break;case"add-torrent":this.initializeAddTorrent();break;case"settings":this.initializeSettings();break}this.initializeGlobalFeatures()}initializeLibrary(){const t=document.getElementById("search"),e=document.getElementById("type-filter"),r=document.getElementById("media-grid");if(!t||!e||!r){console.error("Library elements not found");return}this.loadLibraryItems();const a=u(()=>{this.filterLibraryItems()},300);t.addEventListener("input",a),e.addEventListener("change",()=>this.filterLibraryItems())}initializeSearch(){const t=document.querySelector(".search-input-form"),e=document.getElementById("search-query");if(!t||!e){console.error("Search elements not found");return}e.focus(),t.addEventListener("submit",r=>{this.handleSearchSubmit(r)})}initializeAddTorrent(){const t=document.querySelector(".add-torrent-form");if(!t){console.error("Add torrent form not found");return}t.addEventListener("submit",e=>{this.handleAddTorrent(e)})}initializeSettings(){const t=document.querySelector(".settings-form");if(!t){console.error("Settings form not found");return}this.loadSettings(),t.addEventListener("submit",e=>{this.handleSaveSettings(e)})}initializeGlobalFeatures(){}async loadLibraryItems(){try{const t=await o.getLibraryItems();window.libraryItems=t,this.renderLibraryItems(t)}catch(t){console.error("Failed to load library items:",t)}}renderLibraryItems(t){const e=document.getElementById("media-grid");e&&(e.innerHTML="")}filterLibraryItems(){console.log("Filtering library items...")}async handleSearchSubmit(t){t.preventDefault();const e=t.target,r=new FormData(e),a=r.get("query"),n=r.get("category");if(a.trim()){this.showSearchLoading(!0);try{const i=await o.searchMedia(a,n);this.renderSearchResults(i)}catch(i){console.error("Search failed:",i),this.showSearchError("Search failed. Please try again.")}finally{this.showSearchLoading(!1)}}}async handleAddTorrent(t){t.preventDefault();const e=t.target,a=new FormData(e).get("magnet");try{const n=await o.addTorrent(a);this.showAddTorrentResult(n),n.success&&e.reset()}catch(n){console.error("Failed to add torrent:",n),this.showAddTorrentResult({success:!1,message:"Failed to add torrent: "+n.message})}}async handleSaveSettings(t){t.preventDefault();const e=t.target,r=new FormData(e),a={download_limit:r.get("download_limit")?Number(r.get("download_limit")):void 0,upload_limit:r.get("upload_limit")?Number(r.get("upload_limit")):void 0,max_connections:Number(r.get("max_connections")),streaming_port:Number(r.get("streaming_port")),web_ui_port:Number(r.get("web_ui_port")),enable_upnp:r.has("enable_upnp"),enable_dht:r.has("enable_dht"),enable_pex:r.has("enable_pex")};try{await o.saveSettings(a),this.showSettingsResult("Settings saved successfully!","success")}catch(n){console.error("Failed to save settings:",n),this.showSettingsResult("Failed to save settings","error")}}async loadSettings(){try{const t=await o.getSettings();this.populateSettingsForm(t)}catch(t){console.error("Failed to load settings:",t)}}showSearchLoading(t){}renderSearchResults(t){}showSearchError(t){}showAddTorrentResult(t){}showSettingsResult(t,e){}populateSettingsForm(t){}}const f=new w;window.riptideApi=o;window.riptideApp=f;
