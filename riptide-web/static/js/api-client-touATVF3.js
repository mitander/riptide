class n{constructor(t="/api"){this.baseUrl=t}async getTorrents(){const t=await fetch(`${this.baseUrl}/torrents`);if(!t.ok)throw new Error(`Failed to fetch torrents: ${t.statusText}`);return(await t.json()).torrents||[]}async addTorrent(t,e=!0){const a={magnet:t,start_immediately:e},s=await fetch(`${this.baseUrl}/torrents/add`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(a)});if(!s.ok)throw new Error(`Failed to add torrent: ${s.statusText}`);return(await s.json()).result}async pauseTorrent(t){const e=await fetch(`${this.baseUrl}/torrents/${t}/pause`,{method:"POST"});if(!e.ok)throw new Error(`Failed to pause torrent: ${e.statusText}`)}async resumeTorrent(t){const e=await fetch(`${this.baseUrl}/torrents/${t}/resume`,{method:"POST"});if(!e.ok)throw new Error(`Failed to resume torrent: ${e.statusText}`)}async deleteTorrent(t){const e=await fetch(`${this.baseUrl}/torrents/${t}`,{method:"DELETE"});if(!e.ok)throw new Error(`Failed to delete torrent: ${e.statusText}`)}async getServerStats(){const t=await fetch(`${this.baseUrl}/stats`);if(!t.ok)throw new Error(`Failed to fetch stats: ${t.statusText}`);return(await t.json()).stats}async getLibraryItems(){const t=await fetch(`${this.baseUrl}/library`);if(!t.ok)throw new Error(`Failed to fetch library: ${t.statusText}`);return(await t.json()).items||[]}async getMediaDetails(t){const e=await fetch(`${this.baseUrl}/library/${t}`);if(!e.ok)throw new Error(`Failed to fetch media details: ${e.statusText}`);return(await e.json()).item}async searchMedia(t,e="all"){let a=`${this.baseUrl}/search`;e==="movie"?a=`${this.baseUrl}/search/movies`:e==="tv"&&(a=`${this.baseUrl}/search/tv`);const s=await fetch(`${a}?q=${encodeURIComponent(t)}`);if(!s.ok)throw new Error(`Failed to search: ${s.statusText}`);return(await s.json()).results||[]}async getSettings(){const t=await fetch(`${this.baseUrl}/settings`);if(!t.ok)throw new Error(`Failed to fetch settings: ${t.statusText}`);return(await t.json()).settings}async updateSettings(t){const e=await fetch(`${this.baseUrl}/settings`,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});if(!e.ok)throw new Error(`Failed to update settings: ${e.statusText}`)}async resetSettings(){const t=await fetch(`${this.baseUrl}/settings/reset`,{method:"POST"});if(!t.ok)throw new Error(`Failed to reset settings: ${t.statusText}`)}}export{n as A};
